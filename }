\documentclass[10pt,a4paper]{article}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\usepackage[spanish,es-tabla]{babel}
\parindent=0cm %Modificar tamaÃ±o de sangria
\usepackage{amsmath}
\usepackage{amssymb,amsfonts,latexsym,cancel}
\usepackage{graphicx}
\usepackage{epstopdf}
\usepackage{float}
\usepackage{subfigure}
\usepackage{array}
\usepackage{longtable}
\newcolumntype{E}{>{$}c<{$}}
\setcounter{MaxMatrixCols}{40}
\usepackage{bm}
\usepackage{xcolor}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%PAQUETES O CONFIGURACION NUEVA%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\usepackage[lmargin=2cm, rmargin=2cm,top=2.5cm,bottom=2cm]{geometry}
\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhead{}%%Es para limpiar el documento
\fancyhead[C]{Titulo de nuestro articulo}
\fancyhead[R]{\includegraphics[scale=0.07]{figuras/logo}}
\fancyfoot{}
\fancyfoot[R]{\thepage}
\fancyfoot[L]{Bryan Ricardo}
\renewcommand{\headrulewidth}{0.9pt}
\renewcommand{\footrulewidth}{0.5pt}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}
\begin{titlepage}
\begin{center}
\vspace*{2\baselineskip}%%saltos de linea
\hrule height 3pt
\vspace*{0.5\baselineskip}%%saltos de linea
{\Huge \textbf{Universidad Autonoma de Aguascalientes}}
{\Large \textbf{LICENCIATURA EN MATEMATICAS APLICADAS}}
\vspace*{0.5\baselineskip}%%saltos de linea
\hrule
\vspace*{0.5\baselineskip}%%saltos de linea
\includegraphics[scale=0.5]{figuras/logo}
\vspace*{2\baselineskip} \\%%saltos de linea
\textbf{\large MATERIA: Java Script} \\
\vspace*{1.5\baselineskip}
\textbf{\large Docente: Bryan Ricardo Barbosa Olvera} \\
\vspace*{1.5\baselineskip}
\textbf{\large FECHA DE CREACION: 18 de Junio de 2022} \\  
\vspace*{3\baselineskip}
\includegraphics[scale=0.5]{figuras/imagen}
\vfill
BRYAN RICARDO BARBOSA OLVERA \\
\today \\

\end{center}
\end{titlepage}

\section{POO}
\subsection{Crear Objetos}
const producto  $ = \{ $  \\ nombre: "Monitor 20 pulgadas", \\ precio: 300, \\  $ \} $ 
\subsection{Acceder a los valores}
const producto  $ = \{ $  \\ nombre: "Monitor 20 pulgadas", \\ precio: 300, \\  $ \} $ \\ 
console.log(producto.nombre);\\
\subsection{Agregar O Eliminar valores} 
const producto  $ = \{ $  \\ nombre: "Monitor 20 pulgadas", \\ precio: 300, \\  $ \} $ \\ 
//Agregar  nuevas propiedades \\
producto.imagen = "imagen.jpg"; \\
//ELiminar propiedades del objeto \\
delete producto.precio \\
\subsection{Destructuring} 
const producto  $ = \{ $  \\ nombre: "Monitor 20 pulgadas", \\ precio: 300, \\  $ \} $ \\ 
//Crea y asigna el valor a la variable \\
const {nombre, precio} = producto; \\
console.log(nombre,precio);\\
\subsection{Destructuring de objetos anidados} 
const producto = $ \{ $ \\ nombre: "Monitor 20 pulgadas", \\ precio: 300, \\ informacion: $ \{ $ \\
fabricacion:  $ \{ $ \\ pais: 'CHina' \\ $ \} \} \}$  \\
const $\{ $ nombre, informacion , informacion : $ \{ $ fabricacion: $ \{ $pais $ \} \} \} = $ producto;\\
console.log(pais);\\
\newpage
\subsection{Conjelar un objeto} 
$ " $use strict $ " $ \\
const producto  $ = \{ $  \\ nombre: "Monitor 20 pulgadas", \\ precio: 300, \\  $ \} $ \\ 
//Al conjelar el objeto no deja que se le agregen o eliminen valores del objeto \\
Object.freeze(producto);\\
//el siguiente comando indica con un true si esta conjelado el objeto\\
console.log(Object.isFrozen(producto));\\
\subsection{Sellar un objeto}
$ " $use strict $ " $ \\
const producto  $ = \{ $  \\ nombre: "Monitor 20 pulgadas", \\ precio: 300, \\  $ \} $ \\ 
//Al sellar un objeto es parecido a conjelarlo con la diferencia que le permite cambiar el valor de las llaves \\
Object.seal(producto);\\
producto.precio = 200; \\
//el siguiente comando indica con un true si esta sellado el objeto\\
console.log(Object.isSealed(producto));\\
\subsection{Spread Operator o Rest Operator}
const producto  $ = \{ $  \\ nombre: "Monitor 20 pulgadas", \\ precio: 300, \\  $ \} $ \\ 
const medidas $ = \{ $ \\ peso: '1kg', \\ medida: '1m' \\ $ \} $ \\
//Lo que realiza es unir dos objetos en uno solo \\
const resultado = $ \{ $ ...producto , ...medidas  $ \} $ \\
\subsection{La palabra reservada this}
//Te permite no perder la referencia de la varable que se esta llamando y no tomar variables fuera del objeto
const producto  $ = \{ $  \\ nombre: "Monitor 20 pulgadas", \\ precio: 300, \\  ,mostrarInfo: function $ \left(  \right) \{$ \\
console.log(`EL producto tiene como nombre: $ \$ \{ $ this.nombre  $ \} $`) $ \} $ \\ $ \} $ \\ 
\newpage
\subsection{.keys .values .entries} 
const producto  $ = \{ $  \\ nombre: "Monitor 20 pulgadas", \\ precio: 300, \\  $ \} $ \\ 
//.keys te retorna las llaves del objeto en un objeto \\
console.log(Object.keys(producto)); \\
//.values te retorna los valores del objeto en un objeto \\
console.log(Object.values(producto)); \\
//.entries te retorna las llaves y los valores del objeto en pares en  un objeto \\
console.log(Object.entries(producto)); \\

\newpage
\section{ARRAYS}
\subsection{Crear un arreglo} 
const meses = ['Enero' , 'Febrero' , 'Marzo' , 'Abril' , 'Mayo' , 'Junio' , 'Julio']; \\
\subsection{Acceder a los valores de un arreglo} 
const meses = ['Enero' , 'Febrero' , 'Marzo' , 'Abril' , 'Mayo' , 'Junio' , 'Julio']; \\
console.log(meses[0]);
//Lo siguiente es para acceder al valor de un arreglo dentro de otro arreglo\\
const todo = [1,[1,2]]; \\
console.log(todo[1][1]); \\
//Observece que imprimira el valor 2\\
\subsection{Longitud de un arreglo}  
const meses = ['Enero' , 'Febrero' , 'Marzo' , 'Abril' , 'Mayo' , 'Junio' , 'Julio']; \\
console.log(meses.length); \\
//Observese que retornara como valor 7\\
\subsection{Agregar un valor nuevo en un arreglo}
const meses = ['Enero' , 'Febrero' , 'Marzo' , 'Abril' , 'Mayo' , 'Junio' , 'Julio']; \\
//Observamos que el arreglo solo tiene 7 valores, en el cual se puede acceder en la posicion6 \\
//Para agregar uno nuevo es de la siguiente manera: \\
meses[7] = 'Nuevo mes'; \\
\subsection{Agregar elementos con el spreed operator al inicio o final} 
const meses = ['Enero' , 'Febrero' , 'Marzo' , 'Abril' , 'Mayo' , 'Junio' , 'Julio']; \\
let mesesNuevo = [...meses, 'Junio']; \\
mesesNuevo = ['Diciembre' , ...mesesNuevo]; \\
\subsection{Eliminar un valor al principio del arreglo} 
const meses = ['Enero' , 'Febrero' , 'Marzo' , 'Abril' , 'Mayo' , 'Junio' , 'Julio']; \\
meses.shift(); \\
\subsection{Eliminar un valor al final del arreglo} 
const meses = ['Enero' , 'Febrero' , 'Marzo' , 'Abril' , 'Mayo' , 'Junio' , 'Julio']; \\
meses.pop(); \\
\subsection{Eliminar un valor en cualquier posicion del arreglo} 
const meses = ['Enero' , 'Febrero' , 'Marzo' , 'Abril' , 'Mayo' , 'Junio' , 'Julio']; \\
meses.splice(1,1); \\
//Elimina febrero \\
meses.splice(posicion donde empesara a borrar valores , cantidad de valores que se quieren eliminar); \\

\newpage
\subsection{destructuring con Arreglos} 
const meses = ['Enero' , 'Febrero' , 'Marzo' , 'Abril' , 'Mayo' , 'Junio' , 'Julio']; \\
const [vEnero, vFebrero] = meses;\\
console.log(vFebrero); \\
//Observemos que crea la variable vFebrereo con el valor febrero no necesariamente con el mismo nombre \\
const [, vFebrero] = meses;\\
console.log(vFebrero); \\
//Observemos que crea la variable vFebrereo pero dejamos un espacio para indicar que no queremos crear una variable inecesaria\\
const [, vFebrero,...mesesFaltantes] = meses;\\
console.log(mesesFaltantes); \\
//meses Faltantes obtendra un arreglo con todos los valores que no se asignaron\\

\subsection{Iterarcon Arreglos con .forEach} 
const meses = ['Enero' , 'Febrero' , 'Marzo' , 'Abril' , 'Mayo' , 'Junio' , 'Julio']; \\
meses.forEach((producto) $ \{ $ \\ 
console.log(producto); \\ 
$\} $ )\\
\subsection{Iterarcon Arreglos con .map} 
const meses = ['Enero' , 'Febrero' , 'Marzo' , 'Abril' , 'Mayo' , 'Junio' , 'Julio']; \\
meses.map((producto) $ \{ $ \\ 
console.log(producto); \\ 
$\} $ )\\
//Realiza lo mismo que el forEach pero el map crea un nuevo arreglo\\

\newpage
\section{Iteradores}
\subsection{.forEach} 
const meses = ['Enero' , 'Febrero' , 'Marzo' , 'Abril' , 'Mayo' , 'Junio' , 'Julio']; \\
meses.forEach((pendiente, index)=> $ \{ $ \\
    console.log('$ \$ \{$ indice  $\} \$  $ : $\{$ mes $ \} $');\\
$ \} $ )\\

\subsection{.map} 
const meses = ['Enero' , 'Febrero' , 'Marzo' , 'Abril' , 'Mayo' , 'Junio' , 'Julio']; \\
meses.map((pendiente, index)=> $ \{ $ \\
    console.log('$ \$ \{$ indice  $\} \$  $ : $\{$ mes $ \} $');\\
$ \} $ )\\
//La diferencia principal al .forEach es que crea un nuevo arreglo\\

\subsection{.forOf} 
const meses = ['Enero' , 'Febrero' , 'Marzo' , 'Abril' , 'Mayo' , 'Junio' , 'Julio']; \\
for( let mes of meses) $ \{ $ \\
console.log(pendiente); \\
$ \} $
\subsection{.forIn} 
const producto = $ \{ $ \\ nombre: "Monitor 20 pulgadas", \\ precio: 300, \\ informacion: $ \{ $ \\
fabricacion:  $ \{ $ \\ pais: 'CHina' \\ $ \} \} \}$  \\
for(let propiedad in producto ) $ \{ $ \\
console.log( $` \$ \{ $[propiedad] $ \} `$); \\
$ \} $\\
\subsection{ALternativa del .forIn con el .forOf} 
const producto = $ \{ $ \\ nombre: "Monitor 20 pulgadas", \\ precio: 300, \\ informacion: $ \{ $ \\
fabricacion:  $ \{ $ \\ pais: 'CHina' \\ $ \} \} \}$  \\
for(let [llave, valor] of Object.entries(producto) ) $ \{ $ \\
console.log(valor);\\
console.log(llave);\\
$ \} $ 


\newpage
\section{Array Methods}
\subsection{.includes} 
const meses = ['Enero' , 'Febrero' , 'Marzo' , 'Abril' , 'Mayo' , 'Junio' , 'Julio']; \\
const resultado = meses.includes('Enero'); \\
//te retorna un valor booleano si existe el valor en el arreglo \\
//solo funciona en arreglos que no tienen objetos dentro \\
\subsection{.some} 
const carrito =[ \\ $ \{ $ nombre: 'Monitor 27 Pulgadas' , precio: 500 $ \} $ , \\ $ \{ $ nombre: 'Television' , precio: 100 $ \} $  \\ ]  \\
const existe = carrito.some(producto => $\{$ \\ 
return producto.nombre === 'Television'  \\
$\}$  )
//te retorna un valor booleano si existe el valor en el arreglo
\subsection{.findIndex} 
const meses = ['Enero' , 'Febrero' , 'Marzo' , 'Abril' , 'Mayo' , 'Junio' , 'Julio']; \\
const indice = meses.findIndex( mes => mes === 'Abril'); \\
//Te retorna e indice donde encontro el resultado , si no existe te retorna el -1 \\
\subsection{.reduce} 
const carrito =[ \\ $ \{ $ nombre: 'Monitor 27 Pulgadas' , precio: 500 $ \} $ , \\ $ \{ $ nombre: 'Television' , precio: 100 $ \} $  \\ ]  \\
const existe = carrito.some(producto => $\{$ \\ 
let resultado =  carrito.reduce( (total,producto) => total +producto.precio, 0 );\\
//El total guarda la instancia por eso no se asigna +=, te retornara la suma de todos los precios del arreglo \\ 
//El cero indica desde que numero empesara el total\\
\subsection{.filter} 
const carrito =[ \\ $ \{ $ nombre: 'Monitor 27 Pulgadas' , precio: 500 $ \} $ , \\ $ \{ $ nombre: 'Television' , precio: 400 $ \} $  \\ ]  \\
let resultado;\\
resultado = carrito.filter(producto=> producto.precio > 400); \\
//creara un arreglo con todos los valores que cumplen la condicion \\
\subsection{.find} 
const carrito =[ \\ $ \{ $ nombre: 'Monitor 27 Pulgadas' , precio: 500 $ \} $ , \\ $ \{ $ nombre: 'Television' , precio: 400 $ \} $  \\ ]  \\
const resultado2 = carrito.find(producto => producto.precio === 100 );\\
console.log(resultado2);\\
//resultado2 toma el valor del primer elemento que encuentre\\

\newpage
\subsection{.every} 
const carrito =[ \\ $ \{ $ nombre: 'Monitor 27 Pulgadas' , precio: 500 $ \} $ , \\ $ \{ $ nombre: 'Television' , precio: 400 $ \} $  \\ ]  \\
const resultado = carrito.every(producto => producto.precio <1000);\\
//Te retornara un true si todos los valores del arreglo cumplen la condicion\\ 

\newpage
\section{DOM}
\subsection{document} 
let elemento = document; \\
//Te seleciona todo el html del documento \\
\subsection{document.all } 
let elemento = document.all; \\
//Te seleciona todos los elementos que conforman el HTML\\
\subsection{document.head} 
let elemento = document.head; \\
//Te seleciona todos los elementos que conforman head del HTML\\
\subsection{document.body} 
let elemento = document.body; \\
//Te seleciona todos los elementos que conforman body del HTML\\
\subsection{document.domain} 
let elemento = document.domain; \\
//Te seleciona el dominio\\
\subsection{document.forms} 
let elemento = document.forms; \\
//Te seleciona todos los formularios y te da la cantidad\\
\subsection{document.forms[index]} 
let elemento = document.forms[0]; \\
//Te seleciona el formulario en la posicion 0\\
\subsection{document.forms[index].id} 
let elemento = document.forms[0].id; \\
//Te seleciona el id del formulario\\
\subsection{document.forms[index].method} 
let elemento = document.forms[0].method; \\
//Te seleciona el metodo del formulario\\
\subsection{document.forms[index].classList} 
let elemento = document.forms[0].classList; \\
//Te seleciona todas las clases del formulario\\

\newpage
\subsection{document.links} 
let elemento = document.links; \\
//Te retorna todos los enlaces del documento\\
\subsection{document.images} 
let elemento = document.images; \\
//Te retorna todas las imagenes del documento\\
\subsection{document.scripts} 
let elemento = document.scripts; \\
//Te retorna todos los scrpts del documento\\
\subsection{Seleccionar los elementos por su clase} 
const header  = document.getElementsByClassName('header');\\
console.log(geader);\\
//Si existe mas de un elemento con la misma clase se trae todos los contenedores con la misma clase \\
\subsection{Seleccionar los elementos por su id} 


\end{document}
